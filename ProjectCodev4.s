###I didn't write this code. It was generated by gcc. I wrote the C version.###
	.section	__TEXT,__text,regular,pure_instructions
	.build_version macos, 10, 14
	.globl	_GetIndex               ## -- Begin function GetIndex
	.p2align	4, 0x90
_GetIndex:                              ## @GetIndex
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movb	%sil, %al
	movq	%rdi, -16(%rbp)
	movb	%al, -17(%rbp)
	movl	$0, -24(%rbp)
LBB0_1:                                 ## =>This Inner Loop Header: Depth=1
	cmpl	$100, -24(%rbp)
	jge	LBB0_6
## %bb.2:                               ##   in Loop: Header=BB0_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	movsbl	-17(%rbp), %esi
	cmpl	%esi, %edx
	jne	LBB0_4
## %bb.3:
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	LBB0_7
LBB0_4:                                 ##   in Loop: Header=BB0_1 Depth=1
	jmp	LBB0_5
LBB0_5:                                 ##   in Loop: Header=BB0_1 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	LBB0_1
LBB0_6:
	movl	$-1, -4(%rbp)
LBB0_7:
	movl	-4(%rbp), %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_main                   ## -- Begin function main
	.p2align	4, 0x90
_main:                                  ## @main
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	leaq	L_.str(%rip), %rdi
	leaq	L_.str.1(%rip), %rsi
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movl	$0, -12(%rbp)
	movl	$5911, -16(%rbp)        ## imm = 0x1717
	callq	_fopen
	movq	%rax, -24(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	movq	%rax, %rdi
	callq	_malloc
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
LBB1_1:                                 ## =>This Inner Loop Header: Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	LBB1_4
## %bb.2:                               ##   in Loop: Header=BB1_1 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	movq	%rax, %rdi
	callq	_malloc
	movq	-32(%rbp), %rdi
	movslq	-36(%rbp), %rcx
	movq	%rax, (%rdi,%rcx,8)
## %bb.3:                               ##   in Loop: Header=BB1_1 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	LBB1_1
LBB1_4:
	movl	$0, -40(%rbp)
	movl	$0, -48(%rbp)
	movq	%rsp, %rax
	movq	%rax, -56(%rbp)
LBB1_5:                                 ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB1_7 Depth 2
	movl	-40(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	LBB1_10
## %bb.6:                               ##   in Loop: Header=BB1_5 Depth=1
	jmp	LBB1_7
LBB1_7:                                 ##   Parent Loop BB1_5 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movsbl	-41(%rbp), %eax
	cmpl	$10, %eax
	je	LBB1_9
## %bb.8:                               ##   in Loop: Header=BB1_7 Depth=2
	movq	-24(%rbp), %rdi
	callq	_fgetc
	movb	%al, %cl
	movb	%cl, -41(%rbp)
	movb	-41(%rbp), %cl
	movq	-32(%rbp), %rdi
	movslq	-40(%rbp), %rdx
	movq	(%rdi,%rdx,8), %rdx
	movslq	-48(%rbp), %rdi
	movb	%cl, (%rdx,%rdi)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	LBB1_7
LBB1_9:                                 ##   in Loop: Header=BB1_5 Depth=1
	movl	$0, -48(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movb	$49, -41(%rbp)
	jmp	LBB1_5
LBB1_10:
	movq	-24(%rbp), %rdi
	callq	_fclose
	movb	$97, -57(%rbp)
	movb	$97, -58(%rbp)
	movslq	-16(%rbp), %rdi
	shlq	$3, %rdi
	movl	%eax, -132(%rbp)        ## 4-byte Spill
	callq	_malloc
	movq	%rax, -72(%rbp)
	movl	$0, -76(%rbp)
LBB1_11:                                ## =>This Inner Loop Header: Depth=1
	movl	-76(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	LBB1_14
## %bb.12:                              ##   in Loop: Header=BB1_11 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$0, %rax
	movq	%rax, %rdi
	callq	_malloc
	movq	-72(%rbp), %rdi
	movslq	-76(%rbp), %rcx
	movq	%rax, (%rdi,%rcx,8)
## %bb.13:                              ##   in Loop: Header=BB1_11 Depth=1
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	LBB1_11
LBB1_14:
	movl	$0, -80(%rbp)
	movl	$0, -96(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -104(%rbp)
LBB1_15:                                ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB1_17 Depth 2
                                        ##       Child Loop BB1_22 Depth 3
	cmpl	$100, -104(%rbp)
	jge	LBB1_34
## %bb.16:                              ##   in Loop: Header=BB1_15 Depth=1
	movb	$97, -57(%rbp)
	movl	$0, -108(%rbp)
LBB1_17:                                ##   Parent Loop BB1_15 Depth=1
                                        ## =>  This Loop Header: Depth=2
                                        ##       Child Loop BB1_22 Depth 3
	movl	-108(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	LBB1_30
## %bb.18:                              ##   in Loop: Header=BB1_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movsbl	-57(%rbp), %esi
	callq	_GetIndex
	movl	%eax, -88(%rbp)
	movq	-32(%rbp), %rcx
	movslq	-108(%rbp), %rdi
	movq	(%rcx,%rdi,8), %rdi
	movsbl	-58(%rbp), %esi
	callq	_GetIndex
	movl	%eax, -92(%rbp)
	movl	-88(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jle	LBB1_28
## %bb.19:                              ##   in Loop: Header=BB1_17 Depth=2
	cmpl	$0, -88(%rbp)
	jl	LBB1_28
## %bb.20:                              ##   in Loop: Header=BB1_17 Depth=2
	cmpl	$0, -92(%rbp)
	jl	LBB1_28
## %bb.21:                              ##   in Loop: Header=BB1_17 Depth=2
	movl	$0, -84(%rbp)
LBB1_22:                                ##   Parent Loop BB1_15 Depth=1
                                        ##     Parent Loop BB1_17 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	cmpl	$100, -84(%rbp)
	jge	LBB1_25
## %bb.23:                              ##   in Loop: Header=BB1_22 Depth=3
	movq	$-1, %rdx
	movq	-72(%rbp), %rax
	movslq	-80(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	___strcpy_chk
	movq	%rax, -144(%rbp)        ## 8-byte Spill
## %bb.24:                              ##   in Loop: Header=BB1_22 Depth=3
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	LBB1_22
LBB1_25:                                ##   in Loop: Header=BB1_17 Depth=2
	movq	-72(%rbp), %rax
	movslq	-80(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movb	$0, %al
	callq	_printf
	movl	$10, %edx
	movl	-80(%rbp), %esi
	addl	$1, %esi
	movl	%esi, -80(%rbp)
	movl	-96(%rbp), %esi
	addl	$1, %esi
	movl	%esi, -96(%rbp)
	movl	-96(%rbp), %esi
	movl	%eax, -148(%rbp)        ## 4-byte Spill
	movl	%esi, %eax
	movl	%edx, -152(%rbp)        ## 4-byte Spill
	cltd
	movl	-152(%rbp), %esi        ## 4-byte Reload
	idivl	%esi
	cmpl	$0, %edx
	jne	LBB1_27
## %bb.26:                              ##   in Loop: Header=BB1_17 Depth=2
	movb	-57(%rbp), %al
	addb	$1, %al
	movb	%al, -57(%rbp)
LBB1_27:                                ##   in Loop: Header=BB1_17 Depth=2
	jmp	LBB1_28
LBB1_28:                                ##   in Loop: Header=BB1_17 Depth=2
	jmp	LBB1_29
LBB1_29:                                ##   in Loop: Header=BB1_17 Depth=2
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	LBB1_17
LBB1_30:                                ##   in Loop: Header=BB1_15 Depth=1
	movl	$10, %eax
	movl	-100(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -100(%rbp)
	movl	-100(%rbp), %ecx
	movl	%eax, -156(%rbp)        ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-156(%rbp), %ecx        ## 4-byte Reload
	idivl	%ecx
	cmpl	$0, %edx
	jne	LBB1_32
## %bb.31:                              ##   in Loop: Header=BB1_15 Depth=1
	movb	-58(%rbp), %al
	addb	$1, %al
	movb	%al, -58(%rbp)
LBB1_32:                                ##   in Loop: Header=BB1_15 Depth=1
	jmp	LBB1_33
LBB1_33:                                ##   in Loop: Header=BB1_15 Depth=1
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	jmp	LBB1_15
LBB1_34:
	leaq	L_.str.2(%rip), %rdi
	leaq	L_.str.3(%rip), %rsi
	callq	_fopen
	movq	%rax, -120(%rbp)
	movl	$0, -124(%rbp)
LBB1_35:                                ## =>This Inner Loop Header: Depth=1
	movl	-124(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jge	LBB1_40
## %bb.36:                              ##   in Loop: Header=BB1_35 Depth=1
	movq	-72(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	leaq	l_.str.4(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	je	LBB1_38
## %bb.37:                              ##   in Loop: Header=BB1_35 Depth=1
	movq	-72(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-120(%rbp), %rsi
	callq	_fputs
	movl	%eax, -160(%rbp)        ## 4-byte Spill
LBB1_38:                                ##   in Loop: Header=BB1_35 Depth=1
	jmp	LBB1_39
LBB1_39:                                ##   in Loop: Header=BB1_35 Depth=1
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
	jmp	LBB1_35
LBB1_40:
	leaq	L_.str.5(%rip), %rdi
	movq	-120(%rbp), %rsi
	callq	_fputs
	movq	-120(%rbp), %rdi
	movl	%eax, -164(%rbp)        ## 4-byte Spill
	callq	_fclose
	movl	$0, -128(%rbp)
	movl	%eax, -168(%rbp)        ## 4-byte Spill
LBB1_41:                                ## =>This Inner Loop Header: Depth=1
	cmpl	$10000, -128(%rbp)      ## imm = 0x2710
	jge	LBB1_44
## %bb.42:                              ##   in Loop: Header=BB1_41 Depth=1
	movq	-32(%rbp), %rax
	movslq	-128(%rbp), %rcx
	movq	$0, (%rax,%rcx,8)
	movq	-72(%rbp), %rax
	movslq	-128(%rbp), %rcx
	movq	$0, (%rax,%rcx,8)
## %bb.43:                              ##   in Loop: Header=BB1_41 Depth=1
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
	jmp	LBB1_41
LBB1_44:
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	callq	_free
	movq	$0, -32(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	callq	_free
	movq	$0, -72(%rbp)
	movl	$0, -12(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, %rsp
	movl	-12(%rbp), %eax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rdi
	movq	(%rdi), %rdi
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rdi
	movl	%eax, -172(%rbp)        ## 4-byte Spill
	jne	LBB1_46
## %bb.45:
	movl	-172(%rbp), %eax        ## 4-byte Reload
	movq	%rbp, %rsp
	popq	%rbp
	retq
LBB1_46:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
	.asciz	"1test_3.txt"

L_.str.1:                               ## @.str.1
	.asciz	"r"

L_.str.2:                               ## @.str.2
	.asciz	"output.txt"

L_.str.3:                               ## @.str.3
	.asciz	"a+"

	.section	__TEXT,__const
l_.str.4:                               ## @.str.4
	.space	2

	.section	__TEXT,__cstring,cstring_literals
L_.str.5:                               ## @.str.5
	.asciz	"\n\n\n"


.subsections_via_symbols
